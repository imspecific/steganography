/*
 * To change this license header, choose_img License Headers in Project Properties.
 * To change this template file, choose_img Tools | Templates
 * and open the template in the editor.
 */
package stegano;

import java.awt.Color;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Scanner;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author intel
 */
public class Home extends javax.swing.JFrame {

    /**
     * Creates new form Home
     */
    int mousepX;
    int mousepY;
    int ende;
    int checkLSB = 0, checkPVD = 0, checkHSM = 0, checkDFT = 0;
    int range[] = {0,8,16,32,64,128};
    int value[] = {0xFFFFFFFE, 0xFFFFFFFC, 0xFFFFFFF8, 0xFFFFFFF0, 0xFFFFFFE0, 0xFFFFFFC0, 0xFFFFFF80};
    private final JFileChooser choose_img, choose_txt, save_img,save_txt ;
    private BufferedImage originalImg, steganoImg;
    File TxtFile;
    
    public Home() {
        initComponents();
        choose_img = new JFileChooser();
        choose_txt = new JFileChooser();
        save_img = new JFileChooser();
        save_txt = new JFileChooser();
        choose_img.setFileFilter(new FileNameExtensionFilter("*.images", ImageIO.getReaderFileSuffixes()));
        choose_txt.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        save_img.setDialogType(JFileChooser.SAVE_DIALOG);
        save_txt.setDialogType(JFileChooser.SAVE_DIALOG);
        save_img.setSelectedFile(new File("SteganoImg.png"));
        save_txt.setSelectedFile(new File("SteganoTxt.txt"));
        save_img.setFileFilter(new FileNameExtensionFilter(".png","PNG File"));
        save_txt.setFileFilter(new FileNameExtensionFilter(".txt","Text File"));
        jTextArea3.setBackground(new Color(0,0,0,0));
        jTextArea4.setBackground(new Color(0,0,0,0));
    }

    /** 
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jFrame1 = new javax.swing.JFrame();
        Background = new javax.swing.JPanel();
        Dragger = new javax.swing.JLabel();
        SidePane = new javax.swing.JPanel();
        LSB_Panel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        PVD_Panel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        INFO_Panel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        Title = new javax.swing.JLabel();
        Logout_Label = new javax.swing.JLabel();
        Login_Label = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        jSeparator9 = new javax.swing.JSeparator();
        sideBackgroundLabel = new javax.swing.JLabel();
        Minimize = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        Close = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        BasePanel = new javax.swing.JPanel();
        LoginPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JPasswordField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel13 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        LoginBackLabel = new javax.swing.JLabel();
        RegisterPanel = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel18 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel19 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel21 = new javax.swing.JLabel();
        jSeparator7 = new javax.swing.JSeparator();
        jButton2 = new javax.swing.JButton();
        jPasswordField2 = new javax.swing.JPasswordField();
        jPasswordField3 = new javax.swing.JPasswordField();
        jLabel16 = new javax.swing.JLabel();
        RegisteBackLabel = new javax.swing.JLabel();
        LSB = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        ChooseImgButton = new javax.swing.JButton();
        ChooseTxtButton = new javax.swing.JButton();
        ResetButton = new javax.swing.JButton();
        EncDecButton = new javax.swing.JButton();
        EncoderButton = new javax.swing.JButton();
        DecoderButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        Orig_imgLabel = new javax.swing.JLabel();
        Stegano_imgLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        LSBBackLabel = new javax.swing.JLabel();
        PVD = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        ChooseImgButton1 = new javax.swing.JButton();
        ChooseTxtButton1 = new javax.swing.JButton();
        ResetButton1 = new javax.swing.JButton();
        EncDecButton1 = new javax.swing.JButton();
        EndecButton = new javax.swing.JButton();
        EncoderButton1 = new javax.swing.JButton();
        DecoderButton1 = new javax.swing.JButton();
        SaveButton1 = new javax.swing.JButton();
        Orig_imgLabel1 = new javax.swing.JLabel();
        Stegano_imgLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        INFO = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jTextArea4 = new javax.swing.JTextArea();
        infoBacklabel = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setLocationByPlatform(true);
        setUndecorated(true);

        Background.setBackground(new java.awt.Color(40, 40, 40));
        Background.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Dragger.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                DraggerMouseDragged(evt);
            }
        });
        Dragger.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                DraggerMousePressed(evt);
            }
        });
        Background.add(Dragger, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 20));

        LSB_Panel.setVisible(false);
        PVD_Panel.setVisible(false);
        INFO_Panel.setVisible(false);
        SidePane.setBackground(new java.awt.Color(80, 80, 80));
        SidePane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        LSB_Panel.setBackground(new java.awt.Color(150, 150, 150));
        LSB_Panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LSB_PanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                LSB_PanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                LSB_PanelMouseExited(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Least Significant Bit");

        javax.swing.GroupLayout LSB_PanelLayout = new javax.swing.GroupLayout(LSB_Panel);
        LSB_Panel.setLayout(LSB_PanelLayout);
        LSB_PanelLayout.setHorizontalGroup(
            LSB_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LSB_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
        );
        LSB_PanelLayout.setVerticalGroup(
            LSB_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        SidePane.add(LSB_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 250, 220, 40));

        PVD_Panel.setBackground(new java.awt.Color(150, 150, 150));
        PVD_Panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PVD_PanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                PVD_PanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                PVD_PanelMouseExited(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Pixel Value Differencing");

        javax.swing.GroupLayout PVD_PanelLayout = new javax.swing.GroupLayout(PVD_Panel);
        PVD_Panel.setLayout(PVD_PanelLayout);
        PVD_PanelLayout.setHorizontalGroup(
            PVD_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PVD_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE))
        );
        PVD_PanelLayout.setVerticalGroup(
            PVD_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        SidePane.add(PVD_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 300, 220, 40));

        INFO_Panel.setBackground(new java.awt.Color(150, 150, 150));
        INFO_Panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                INFO_PanelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                INFO_PanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                INFO_PanelMouseExited(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 17)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Info");

        javax.swing.GroupLayout INFO_PanelLayout = new javax.swing.GroupLayout(INFO_Panel);
        INFO_Panel.setLayout(INFO_PanelLayout);
        INFO_PanelLayout.setHorizontalGroup(
            INFO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(INFO_PanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        INFO_PanelLayout.setVerticalGroup(
            INFO_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        SidePane.add(INFO_Panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 350, 220, 40));

        Title.setFont(new java.awt.Font("Cambria", 3, 30)); // NOI18N
        Title.setForeground(new java.awt.Color(255, 255, 255));
        Title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Title.setText("Steganography");
        SidePane.add(Title, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 220, 70));

        Logout_Label.setVisible(false);
        Logout_Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Logout_Label.setForeground(new java.awt.Color(255, 255, 255));
        Logout_Label.setText("Logout");
        Logout_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Logout_LabelMouseClicked(evt);
            }
        });
        SidePane.add(Logout_Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 580, -1, -1));

        Login_Label.setVisible(false);
        Login_Label.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Login_Label.setForeground(new java.awt.Color(255, 255, 255));
        Login_Label.setText("Login");
        Login_Label.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Login_LabelMouseClicked(evt);
            }
        });
        SidePane.add(Login_Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 550, 40, -1));
        SidePane.add(jSeparator8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 200, -1));
        SidePane.add(jSeparator9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 200, 10));

        sideBackgroundLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/SideBack.jpg"))); // NOI18N
        sideBackgroundLabel.setOpaque(true);
        SidePane.add(sideBackgroundLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 660));

        Background.add(SidePane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 220, 660));

        Minimize.setBackground(new java.awt.Color(40, 40, 40));
        Minimize.setLayout(new java.awt.BorderLayout());

        jLabel4.setFont(new java.awt.Font("Britannic Bold", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("_");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel4MouseExited(evt);
            }
        });
        Minimize.add(jLabel4, java.awt.BorderLayout.CENTER);

        Background.add(Minimize, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 0, 20, 20));

        Close.setBackground(new java.awt.Color(40, 40, 40));
        Close.setLayout(new java.awt.BorderLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("X");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel3MouseExited(evt);
            }
        });
        Close.add(jLabel3, java.awt.BorderLayout.CENTER);

        Background.add(Close, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 0, 20, 20));

        BasePanel.setBackground(new java.awt.Color(40, 40, 40));
        BasePanel.setLayout(new java.awt.CardLayout());

        LoginPanel.setBackground(new java.awt.Color(40, 40, 40));
        LoginPanel.setMinimumSize(new java.awt.Dimension(830, 630));
        LoginPanel.setPreferredSize(new java.awt.Dimension(830, 630));
        LoginPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Login");
        LoginPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 199, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Username");
        LoginPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 210, -1, -1));

        jTextField1.setBackground(new java.awt.Color(40, 40, 40));
        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setText("Enter username");
        jTextField1.setBorder(null);
        jTextField1.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        jTextField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField1FocusGained(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        LoginPanel.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 250, 276, -1));
        LoginPanel.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 270, 276, 10));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Password");
        LoginPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 300, -1, -1));

        jPasswordField1.setBackground(new java.awt.Color(40, 40, 40));
        jPasswordField1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPasswordField1.setForeground(new java.awt.Color(255, 255, 255));
        jPasswordField1.setBorder(null);
        jPasswordField1.setDisabledTextColor(new java.awt.Color(204, 204, 204));
        jPasswordField1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField1FocusGained(evt);
            }
        });
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });
        LoginPanel.add(jPasswordField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 340, 276, -1));
        LoginPanel.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 360, 276, 10));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Sign up?");
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });
        LoginPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 420, -1, -1));

        jButton1.setText("Login");
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        LoginPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 410, 80, 28));

        LoginBackLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/BaseBackground.jpg"))); // NOI18N
        LoginBackLabel.setOpaque(true);
        LoginPanel.add(LoginBackLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 640));

        BasePanel.add(LoginPanel, "card6");

        RegisterPanel.setBackground(new java.awt.Color(40, 40, 40));
        RegisterPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("First Name");
        RegisterPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 39, -1, -1));

        jTextField2.setBackground(new java.awt.Color(40, 40, 40));
        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jTextField2.setText("Enter first name");
        jTextField2.setBorder(null);
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
        });
        RegisterPanel.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 90, 276, -1));
        RegisterPanel.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 114, 276, 10));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Last Name");
        RegisterPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 149, -1, -1));

        jTextField3.setBackground(new java.awt.Color(40, 40, 40));
        jTextField3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(255, 255, 255));
        jTextField3.setText("Enter last name");
        jTextField3.setBorder(null);
        jTextField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField3FocusGained(evt);
            }
        });
        RegisterPanel.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 200, 276, -1));
        RegisterPanel.add(jSeparator4, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 224, 276, 10));

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Username");
        RegisterPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 259, -1, -1));

        jTextField4.setBackground(new java.awt.Color(40, 40, 40));
        jTextField4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField4.setForeground(new java.awt.Color(255, 255, 255));
        jTextField4.setText("Enter username");
        jTextField4.setBorder(null);
        jTextField4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField4FocusGained(evt);
            }
        });
        RegisterPanel.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 310, 276, -1));
        RegisterPanel.add(jSeparator5, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 334, 276, 10));

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Password");
        RegisterPanel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 369, -1, -1));
        RegisterPanel.add(jSeparator6, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 439, 276, 10));

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("Re-enter Password");
        RegisterPanel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 474, -1, -1));
        RegisterPanel.add(jSeparator7, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 547, 276, 10));

        jButton2.setText("Register");
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        RegisterPanel.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(555, 564, 98, 27));

        jPasswordField2.setBackground(new java.awt.Color(40, 40, 40));
        jPasswordField2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPasswordField2.setForeground(new java.awt.Color(255, 255, 255));
        jPasswordField2.setBorder(null);
        jPasswordField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField2FocusGained(evt);
            }
        });
        RegisterPanel.add(jPasswordField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 415, 276, -1));

        jPasswordField3.setBackground(new java.awt.Color(40, 40, 40));
        jPasswordField3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jPasswordField3.setForeground(new java.awt.Color(255, 255, 255));
        jPasswordField3.setBorder(null);
        jPasswordField3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPasswordField3FocusGained(evt);
            }
        });
        RegisterPanel.add(jPasswordField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 523, 276, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Registration");
        RegisterPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 230, -1));

        RegisteBackLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/BaseBackground.jpg"))); // NOI18N
        RegisteBackLabel.setText("jLabel1");
        RegisteBackLabel.setOpaque(true);
        RegisterPanel.add(RegisteBackLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 640));

        BasePanel.add(RegisterPanel, "card7");

        LSB.setBackground(new java.awt.Color(40, 40, 40));
        LSB.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Input text:");
        LSB.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 435, -1, -1));

        ChooseImgButton.setText("Choose Image");
        ChooseImgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseImgButtonActionPerformed(evt);
            }
        });
        LSB.add(ChooseImgButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 580, 130, -1));

        ChooseTxtButton.setText("Choose text file");
        ChooseTxtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseTxtButtonActionPerformed(evt);
            }
        });
        LSB.add(ChooseTxtButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 580, 130, -1));

        ResetButton.setText("Reset");
        ResetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButtonActionPerformed(evt);
            }
        });
        LSB.add(ResetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 580, 80, -1));

        EncDecButton.setText("Encode");
        EncDecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncDecButtonActionPerformed(evt);
            }
        });
        LSB.add(EncDecButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 580, 80, -1));

        EncoderButton.setBackground(new java.awt.Color(100, 100, 100));
        EncoderButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        EncoderButton.setForeground(new java.awt.Color(255, 255, 255));
        EncoderButton.setText("Encode");
        EncoderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncoderButtonActionPerformed(evt);
            }
        });
        LSB.add(EncoderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 13, 135, 30));

        DecoderButton.setBackground(new java.awt.Color(100, 100, 100));
        DecoderButton.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        DecoderButton.setForeground(new java.awt.Color(255, 255, 255));
        DecoderButton.setText("Decode");
        DecoderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecoderButtonActionPerformed(evt);
            }
        });
        LSB.add(DecoderButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 13, 135, -1));

        SaveButton.setText("Save Image File");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        LSB.add(SaveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 580, 130, -1));

        Orig_imgLabel.setBackground(new java.awt.Color(60, 60, 60));
        Orig_imgLabel.setOpaque(true);
        LSB.add(Orig_imgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 65, 400, 350));

        Stegano_imgLabel.setBackground(new java.awt.Color(60, 60, 60));
        Stegano_imgLabel.setOpaque(true);
        LSB.add(Stegano_imgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(467, 65, 400, 350));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        LSB.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 455, 834, -1));

        LSBBackLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/BaseBackground.jpg"))); // NOI18N
        LSBBackLabel.setText("jLabel1");
        LSBBackLabel.setOpaque(true);
        LSB.add(LSBBackLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 640));

        BasePanel.add(LSB, "card2");

        PVD.setBackground(new java.awt.Color(40, 40, 40));
        PVD.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Input text:");
        PVD.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 435, -1, -1));

        ChooseImgButton1.setText("Choose Image");
        ChooseImgButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseImgButton1ActionPerformed(evt);
            }
        });
        PVD.add(ChooseImgButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 580, 130, -1));

        ChooseTxtButton1.setText("Choose text file");
        ChooseTxtButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChooseTxtButton1ActionPerformed(evt);
            }
        });
        PVD.add(ChooseTxtButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 580, 130, -1));

        ResetButton1.setText("Reset");
        ResetButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetButton1ActionPerformed(evt);
            }
        });
        PVD.add(ResetButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 580, 80, -1));

        EncDecButton1.setText("Encode");
        EncDecButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncDecButton1ActionPerformed(evt);
            }
        });
        PVD.add(EncDecButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 580, 80, -1));

        EndecButton.setText("jButton3");
        EndecButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EndecButtonActionPerformed(evt);
            }
        });
        PVD.add(EndecButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 580, 80, -1));

        EncoderButton1.setBackground(new java.awt.Color(100, 100, 100));
        EncoderButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        EncoderButton1.setForeground(new java.awt.Color(255, 255, 255));
        EncoderButton1.setText("Encode");
        EncoderButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncoderButton1ActionPerformed(evt);
            }
        });
        PVD.add(EncoderButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 13, 135, 30));

        DecoderButton1.setBackground(new java.awt.Color(100, 100, 100));
        DecoderButton1.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        DecoderButton1.setForeground(new java.awt.Color(255, 255, 255));
        DecoderButton1.setText("Decode");
        DecoderButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecoderButton1ActionPerformed(evt);
            }
        });
        PVD.add(DecoderButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(185, 13, 135, -1));

        SaveButton1.setText("Save Image File");
        SaveButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButton1ActionPerformed(evt);
            }
        });
        PVD.add(SaveButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 580, 130, -1));

        Orig_imgLabel1.setBackground(new java.awt.Color(60, 60, 60));
        Orig_imgLabel1.setOpaque(true);
        PVD.add(Orig_imgLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 65, 400, 350));

        Stegano_imgLabel1.setBackground(new java.awt.Color(60, 60, 60));
        Stegano_imgLabel1.setOpaque(true);
        PVD.add(Stegano_imgLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(467, 65, 400, 350));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        PVD.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 455, 834, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/BaseBackground.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        jLabel1.setOpaque(true);
        PVD.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 640));

        BasePanel.add(PVD, "card3");

        INFO.setBackground(new java.awt.Color(40, 40, 40));
        INFO.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Least Significant Bit");
        INFO.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, -1, -1));

        jTextArea3.setBackground(new java.awt.Color(102, 102, 102));
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea3.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea3.setRows(5);
        jTextArea3.setText("LSB replaces the least significant bit of the pixel with the information to be hidden. Since LSB \nis replaced there is no effect on cover image and hence unintended user will not get the idea that \nsome message is hidden behind the image. However there is a little change in level of intensity of \noriginal and modified pixel, but it cannot be detected visually.\n \nThe following example explain how the letter ‘A’ can be hidden into the three pixels i.e. eight bytes\nof an 24-bit image.\n\n Pixels: (00100111 11101011 11001010) \t\t\tA: 010100111 \n            (00100111 11011000 10101001)\n            (11001000 00110111 11011001 ) \n\nResult: (00100110 11101011 11001010)\n            (00100111 11011000 10101000) \n            (11001001 00110111 11011001 )");
        jTextArea3.setBorder(null);
        INFO.add(jTextArea3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 820, 280));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Pixel Value Differencing");
        INFO.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, -1, -1));

        jTextArea4.setBackground(new java.awt.Color(102, 102, 102));
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        jTextArea4.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea4.setRows(5);
        jTextArea4.setText("The pixel-value differencing (PVD) scheme uses the difference value between two consecutive pixels in\na block to determine how many secret bits should be embedded.\n\nIn the process of embedding a secret message, a cover image is partitioned into non-overlapping \nblocks of two consecutive pixels. A difference value is calculated from the values of the two pixels\nin each block. All possible difference values are classified into a number of ranges. The selection\nof the range intervals is based on the characteristics of human vision’s sensitivity to gray value\nvariations from smoothness to contrast. The difference value then is replaced by a new value to\nembed the value of a sub-stream of the secret message. The number of bits which can be embedded \nin a pixel pair is decided by the width of the range that the difference value belongs to.\nThis method provides an easy way to produce a more imperceptible result than those yielded by simple \nleast-significant-bit replacement methods.");
        jTextArea4.setBorder(null);
        INFO.add(jTextArea4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 390, 820, 240));

        infoBacklabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/BaseBackground.jpg"))); // NOI18N
        infoBacklabel.setText("jLabel2");
        infoBacklabel.setOpaque(true);
        INFO.add(infoBacklabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 640));

        BasePanel.add(INFO, "card4");

        Background.add(BasePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 900, 640));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1120, 660));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jLabel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseEntered
        // TODO add your handling code here:
        Close.setBackground(new Color(178,34,34));
    }//GEN-LAST:event_jLabel3MouseEntered

    private void jLabel3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseExited
        // TODO add your handling code here:
        Close.setBackground(new Color(40,40,40));
    }//GEN-LAST:event_jLabel3MouseExited

    private void jLabel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseEntered
        // TODO add your handling code here:
        Minimize.setBackground(new Color(80,80,80));
    }//GEN-LAST:event_jLabel4MouseEntered

    private void jLabel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseExited
        // TODO add your handling code here:
        Minimize.setBackground(new Color(40,40,40));
    }//GEN-LAST:event_jLabel4MouseExited

    private void PVD_PanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PVD_PanelMouseClicked
        // TODO add your handling code here:
        BasePanel.removeAll();
        BasePanel.add(PVD);
        BasePanel.repaint();
        BasePanel.revalidate();
        EncoderButton1.doClick();
        LSB_Panel.setBackground(new Color(150,150,150));
        PVD_Panel.setBackground(new Color(77,150,225));
        INFO_Panel.setBackground(new Color(150,150,150));
        checkLSB = 0;
        checkPVD = 1;
        checkHSM = 0;
        checkDFT = 0;
    }//GEN-LAST:event_PVD_PanelMouseClicked

    private void INFO_PanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_INFO_PanelMouseClicked
        // TODO add your handling code here:
        BasePanel.removeAll();
        BasePanel.add(INFO);
        BasePanel.repaint();
        BasePanel.revalidate();
        LSB_Panel.setBackground(new Color(150,150,150));
        PVD_Panel.setBackground(new Color(150,150,150));
        INFO_Panel.setBackground(new Color(77,150,225));
        checkLSB = 0;
        checkPVD = 0;
        checkHSM = 1;
        checkDFT = 0;
    }//GEN-LAST:event_INFO_PanelMouseClicked

    private void LSB_PanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LSB_PanelMouseClicked
        // TODO add your handling code here:
        BasePanel.removeAll();
        BasePanel.add(LSB);
        BasePanel.repaint();
        BasePanel.revalidate();
        EncoderButton.doClick();
        LSB_Panel.setBackground(new Color(77,208,225));
        PVD_Panel.setBackground(new Color(150,150,150));
        INFO_Panel.setBackground(new Color(150,150,150));
        checkLSB = 1;
        checkPVD = 0;
        checkHSM = 0;
        checkDFT = 0;
    }//GEN-LAST:event_LSB_PanelMouseClicked

    private void LSB_PanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LSB_PanelMouseEntered
        // TODO add your handling code here:
        LSB_Panel.setBackground(new Color(77,150,225));
    }//GEN-LAST:event_LSB_PanelMouseEntered

    private void LSB_PanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LSB_PanelMouseExited
        // TODO add your handling code here:
        if(checkLSB!=1)
        {
            this.repaint();
            LSB_Panel.setBackground(new Color(150,150,150));
        }
        else
        {
            this.repaint();
            LSB_Panel.setBackground(new Color(77,208,225));
        }
    }//GEN-LAST:event_LSB_PanelMouseExited

    private void PVD_PanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PVD_PanelMouseEntered
        // TODO add your handling code here:
        PVD_Panel.setBackground(new Color(77,150,225));
    }//GEN-LAST:event_PVD_PanelMouseEntered

    private void PVD_PanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PVD_PanelMouseExited
        // TODO add your handling code here:
        if(checkPVD!=1)
        {
            this.repaint();
            PVD_Panel.setBackground(new Color(150,150,150));
        }
        else
        {
            this.repaint();
            PVD_Panel.setBackground(new Color(77,208,225));
        }
    }//GEN-LAST:event_PVD_PanelMouseExited

    private void INFO_PanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_INFO_PanelMouseEntered
        // TODO add your handling code here:
        INFO_Panel.setBackground(new Color(77,150,225));
    }//GEN-LAST:event_INFO_PanelMouseEntered

    private void INFO_PanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_INFO_PanelMouseExited
        // TODO add your handling code here:
        if(checkHSM!=1)
        {
            this.repaint();
            INFO_Panel.setBackground(new Color(150,150,150));
        }
        else
        {
            this.repaint();
            INFO_Panel.setBackground(new Color(77,208,225));
        }
    }//GEN-LAST:event_INFO_PanelMouseExited

    private void DraggerMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DraggerMouseDragged
        // TODO add your handling code here:
        int coordinate_X = evt.getXOnScreen();
        int coordinate_Y = evt.getYOnScreen();
        this.setLocation(coordinate_X-mousepX, coordinate_Y-mousepY);
    }//GEN-LAST:event_DraggerMouseDragged

    private void DraggerMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DraggerMousePressed
        // TODO add your handling code here:
        mousepX = evt.getX();
        mousepY = evt.getY();
    }//GEN-LAST:event_DraggerMousePressed

    private void Login_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Login_LabelMouseClicked
        // TODO add your handling code here:
        BasePanel.removeAll();
        BasePanel.add(LoginPanel);
        BasePanel.repaint();
        BasePanel.revalidate();
        LSB_Panel.setBackground(new Color(150,150,150));
        PVD_Panel.setBackground(new Color(150,150,150));
        INFO_Panel.setBackground(new Color(150,150,150));
        Login_Label.setVisible(false);
    }//GEN-LAST:event_Login_LabelMouseClicked

    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusGained
        // TODO add your handling code here:
        jTextField2.selectAll();
    }//GEN-LAST:event_jTextField2FocusGained

    private void jTextField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField3FocusGained
        // TODO add your handling code here:
        jTextField3.selectAll();
    }//GEN-LAST:event_jTextField3FocusGained

    private void jTextField4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField4FocusGained
        // TODO add your handling code here:
        jTextField4.selectAll();
    }//GEN-LAST:event_jTextField4FocusGained

    private void jPasswordField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPasswordField2FocusGained
        // TODO add your handling code here:
        jPasswordField2.selectAll();
    }//GEN-LAST:event_jPasswordField2FocusGained

    private void jPasswordField3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPasswordField3FocusGained
        // TODO add your handling code here:
        jPasswordField3.selectAll();
    }//GEN-LAST:event_jPasswordField3FocusGained

    private void DecoderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecoderButtonActionPerformed
        // TODO add your handling code here:
        ende = 2;
        jLabel14.setText("Output text:");
        Stegano_imgLabel.setVisible(false);
        DecoderButton.setBackground(new Color(60,160,180));
        EncoderButton.setBackground(new Color(100,100,100));
        EncDecButton.setText("Decode");
        SaveButton.setText("Save Text File");
        ChooseTxtButton.setVisible(false);
        ResetButton.doClick();
    }//GEN-LAST:event_DecoderButtonActionPerformed

    private void EncoderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncoderButtonActionPerformed
        // TODO add your handling code here:
        ende = 1;
        Stegano_imgLabel.setVisible(true);
        jLabel14.setText("Input text:");
        EncoderButton.setBackground(new Color(60,160,180));
        DecoderButton.setBackground(new Color(100,100,100));
        EncDecButton.setText("Encode");
        SaveButton.setText("Save Image File");
        ChooseTxtButton.setVisible(true);
        ResetButton.doClick();
    }//GEN-LAST:event_EncoderButtonActionPerformed

    private void EncDecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncDecButtonActionPerformed
        // TODO add your handling code here:
        if(ende == 1)
        {
            if(originalImg!=null)
            {
                int imgCols = originalImg.getWidth();
                int imgRows = originalImg.getHeight();
                int msgLength = jTextArea1.getText().length();
                String message = "!encoded!" + msgLength + "!" + jTextArea1.getText();
                msgLength = message.length();
                int[] twoBitMessage = new int[4 * msgLength];
                char currentChar;
                for(int i=0; i<msgLength; i++)
                {
                    currentChar = message.charAt(i);
                    twoBitMessage[4*i + 0] = (currentChar >> 6) & 0x3;
                    twoBitMessage[4*i + 1] = (currentChar >> 4) & 0x3;
                    twoBitMessage[4*i + 2] = (currentChar >> 2) & 0x3;
                    twoBitMessage[4*i + 3] = (currentChar)      & 0x3;
                }
                int pixel, pixOut, count = 0;
                loop: for(int i=0; i<imgCols; i++)
                {
                    for(int j=0; j<imgRows; j++)
                    {
                        if(count<4*msgLength)
                        {
                            pixel = originalImg.getRGB(i,j);
                            pixOut = (pixel & 0xFFFFFFFC) | twoBitMessage[count++];
                            steganoImg.setRGB(i,j,pixOut);
                        }
                        else
                        break loop;
                    }
                }
                Image newImg = steganoImg.getScaledInstance(Stegano_imgLabel.getWidth(), Stegano_imgLabel.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon img1 = new ImageIcon(newImg);
                Stegano_imgLabel.setIcon(img1);
                JOptionPane.showMessageDialog(null,""+(originalImg.getRGB(0,0)-originalImg.getRGB(7,2)));
            }
        }
        if(ende == 2)
        {
            if(!isEncoded(steganoImg, steganoImg.getWidth(), steganoImg.getHeight())) {
			jTextArea1.setText(null);
		}
            else
            {
		
		int msgLength = getEncodedLength(steganoImg, steganoImg.getWidth(), steganoImg.getHeight());
				
		StringBuffer decodedMsg = new StringBuffer();
		Deque<Integer> listChar = new ArrayDeque<Integer>();
		
		int pixel, temp, charOut, ignore = 0, count = 0;
		loop: for(int i = 0; i < steganoImg.getWidth(); i++) {
			for(int j = 0; j < steganoImg.getHeight(); j++) {
				if(ignore < 36 + 4*(String.valueOf(msgLength).length()+1)) {
					ignore++;
					continue;
				}
				
				if(count++ == 4*msgLength) {
					break loop;
				}
				pixel = steganoImg.getRGB(i, j); //grab RGB value at specified pixel
				temp = pixel & 0x03; //extract 2 LSB from encoded data
				
				listChar.add(temp); //add the extracted data to a queue for later processing
				
				if(listChar.size() >=4) { //once we have 8 bits of data extracted
					//combine them to create a byte, and store this byte as a character
					charOut = (listChar.pop() << 6) | (listChar.pop() << 4) | (listChar.pop() << 2) | listChar.pop() ;
					decodedMsg.append((char)charOut);
				}
			}
                }
                String outputMsg = new String(decodedMsg);
                jTextArea1.setText(outputMsg);
            }
        }
    }//GEN-LAST:event_EncDecButtonActionPerformed

    int findDifference(Color c1, Color c2)
    {
        int r1 = c1.getRed();
        int g1 = c1.getGreen();
        int b1 = c1.getBlue();
        int r2 = c2.getRed();
        int g2 = c2.getGreen();
        int b2 = c2.getBlue();
        return (int)Math.abs(((r1-r2)+(g1-g2)+(b1-b2))/3);
    }
    
    int checkRange(int a)
    {
        int val=0;
        for(int i=0;i<range.length;i++)
        {
            if(a>=range[i] && a<Math.pow(2,i+3))
                val=i;
        }
        return val;
    }
    
    boolean isEncoded(BufferedImage input, int width, int height) { //Check for "!encoded!" at starting
		
		StringBuffer decodedMsg = new StringBuffer();
		Deque<Integer> listChar = new ArrayDeque<Integer>();
		
		int pixel, temp, charOut, count = 0;
		loop: for(int i = 0; i < width; i++) {
			for(int j = 0; j < height; j++, count++) {
				
				if(count == 45) { //remain in loop till first 9 characters are extracted
					break loop;
				}
				pixel = input.getRGB(i, j); //grab RGB value at specified pixel
				temp = pixel & 0x03; //extract 2 LSB from encoded data
				
				listChar.add(temp); //add the extracted data to a queue for later processing
				
				if(listChar.size() >=4) { //once we have 8 bits of data extracted
					//combine them to create a byte, and store this byte as a character
					charOut = (listChar.pop() << 6) | (listChar.pop() << 4) | (listChar.pop() << 2) | listChar.pop() ;
					decodedMsg.append((char)charOut); //else add character to a StringBuffer
					count++;
				}
			}			
		}
		
		String check = new String(decodedMsg);
		System.out.println(check + " " + check.length());
		if (check.compareTo("!encoded!") == 0) {
			System.out.println("true");
			return true;
		} else {
			return false;
		}
		
	} //end of isEncoded() method
    
    int getEncodedLength(BufferedImage input, int width, int height) { //method to get actual length of message encoded
		
		StringBuffer decodedMsg = new StringBuffer();
		Deque<Integer> listChar = new ArrayDeque<Integer>();
		
		int pixel, temp, charOut, count = 0;
		loop: for(int i = 0; i < width; i++) {
			for(int j = 0; j < height; j++) {
				if(count < 36) { //ignore the 36 bits or 9 bytes, equal to "!encoded!"
					count++;
					continue;
				}
				
				pixel = input.getRGB(i, j); //grab RGB value at specified pixel
				temp = pixel & 0x03; //extract 2 LSB from encoded data
				
				listChar.add(temp); //add the extracted data to a queue for later processing
				
				if(listChar.size() >=4) { //once we have 8 bits of data extracted
					//combine them to create a byte, and store this byte as a character
					charOut = (listChar.pop() << 6) | (listChar.pop() << 4) | (listChar.pop() << 2) | listChar.pop() ;
					if((char)charOut == '!') { //terminate process if character extracted is '!'
						break loop;
					} else {
						decodedMsg.append((char)charOut); //else add character to a StringBuffer
					}
				}
			}
			
		}
		
		String length = new String(decodedMsg);
		System.out.println("length is " + Integer.parseInt(length));
		
		return Integer.parseInt(length);
	} //end of getEncodedLength() method
    
    private void ResetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButtonActionPerformed
        // TODO add your handling code here:
        originalImg = null;
        steganoImg = null;
        Orig_imgLabel.setIcon(null);
        Stegano_imgLabel.setIcon(null);
        jTextArea1.setText(null);
    }//GEN-LAST:event_ResetButtonActionPerformed

    private void ChooseTxtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseTxtButtonActionPerformed
        // TODO add your handling code here:
        int returnValue = choose_txt.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION)
        {
            TxtFile = choose_txt.getSelectedFile();
            try            {
                jTextArea1.setText(new Scanner( TxtFile ).useDelimiter("\\A").next());
                JOptionPane.showMessageDialog(null,"File successfully loaded");
            }
            catch(FileNotFoundException e)
            {
                JOptionPane.showMessageDialog(null,"File not found");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"No file choosen!");
        }
    }//GEN-LAST:event_ChooseTxtButtonActionPerformed

    private void ChooseImgButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseImgButtonActionPerformed
        // TODO add your handling code here:
        int returnValue = choose_img.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION)
        {
            try            {
                originalImg = ImageIO.read(choose_img.getSelectedFile());
                steganoImg = ImageIO.read(choose_img.getSelectedFile());
                String filename = (choose_img.getSelectedFile()).getAbsolutePath();
                Image newImg = originalImg.getScaledInstance(Orig_imgLabel.getWidth(), Orig_imgLabel.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon img1 = new ImageIcon(newImg);
                Orig_imgLabel.setIcon(img1);
                if(ende == 2)
                    jTextArea1.setText(null);
                JOptionPane.showMessageDialog(null,"File successfully loaded");
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null,"Error in loading file");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"No file choosen!");
        }
    }//GEN-LAST:event_ChooseImgButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:
        if(ende == 1)
        {
            int returnValue = save_img.showSaveDialog(this);
            if(returnValue == JFileChooser.APPROVE_OPTION)
            {
                try            {
                    ImageIO.write(steganoImg,"png",save_img.getSelectedFile());
                    JOptionPane.showMessageDialog(null,"File successfully saved");
                }
                catch(IOException e)
                {
                    JOptionPane.showMessageDialog(null,"Error in saving file");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null,"No file choosen!");
            }
        }
        if(ende == 2)
        {
            int returnValue = save_txt.showSaveDialog(this);
            if(returnValue ==JFileChooser.APPROVE_OPTION)
            {
                String content = jTextArea1.getText();
                File f = save_txt.getSelectedFile();
                try
                {
                    FileWriter fw = new FileWriter(f.getPath());
                    fw.write(content);
                    fw.flush();
                    fw.close();
                    JOptionPane.showMessageDialog(null,"File successfully saved");
                }
                catch(IOException e)
                {
                    JOptionPane.showMessageDialog(null, "Error in saving file");
                }
            }
            else
                JOptionPane.showMessageDialog(null,"No file choosen");
        }
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel4MouseClicked

    private void ChooseImgButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseImgButton1ActionPerformed
        // TODO add your handling code here:
        int returnValue = choose_img.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION)
        {
            try            {
                originalImg = ImageIO.read(choose_img.getSelectedFile());
                steganoImg = ImageIO.read(choose_img.getSelectedFile());
                String filename = (choose_img.getSelectedFile()).getAbsolutePath();
                Image newImg = originalImg.getScaledInstance(Orig_imgLabel1.getWidth(), Orig_imgLabel1.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon img1 = new ImageIcon(newImg);
                Orig_imgLabel1.setIcon(img1);
                if(ende == 2)
                    jTextArea2.setText(null);
                JOptionPane.showMessageDialog(null,"File successfully loaded");
            }
            catch(IOException e)
            {
                JOptionPane.showMessageDialog(null,"Error in loading file");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"No file choosen!");
        }
    }//GEN-LAST:event_ChooseImgButton1ActionPerformed

    private void ChooseTxtButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChooseTxtButton1ActionPerformed
        // TODO add your handling code here:
        int returnValue = choose_txt.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION)
        {
            TxtFile = choose_txt.getSelectedFile();
            try            {
                jTextArea2.setText(new Scanner( TxtFile ).useDelimiter("\\A").next());
                JOptionPane.showMessageDialog(null,"File successfully loaded");
            }
            catch(FileNotFoundException e)
            {
                JOptionPane.showMessageDialog(null,"File not found");
            }
        }
        else
        {
            JOptionPane.showMessageDialog(null,"No file choosen!");
        }
    }//GEN-LAST:event_ChooseTxtButton1ActionPerformed

    private void ResetButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetButton1ActionPerformed
        // TODO add your handling code here:
        originalImg = null;
        steganoImg = null;
        Orig_imgLabel1.setIcon(null);
        Stegano_imgLabel1.setIcon(null);
        jTextArea2.setText(null);
    }//GEN-LAST:event_ResetButton1ActionPerformed

    private void EncDecButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncDecButton1ActionPerformed
        // TODO add your handling code here:
        if(ende == 1)
        {
            if(originalImg!=null)
            {
                int imgCols = originalImg.getWidth();
                int imgRows = originalImg.getHeight();
                int msgLength = jTextArea2.getText().length();
                String message = "!encoded!" + msgLength + "!" + jTextArea2.getText();
                msgLength = message.length();
                int[] twoBitMessage = new int[4 * msgLength];
                char currentChar;
                for(int i=0; i<msgLength; i++)
                {
                    currentChar = message.charAt(i);
                    twoBitMessage[4*i + 0] = (currentChar >> 6) & 0x3;
                    twoBitMessage[4*i + 1] = (currentChar >> 4) & 0x3;
                    twoBitMessage[4*i + 2] = (currentChar >> 2) & 0x3;
                    twoBitMessage[4*i + 3] = (currentChar)      & 0x3;
                }
                int pixel, pixOut, count = 0;
                loop: for(int i=0; i<imgCols; i++)
                {
                    for(int j=0; j<imgRows; j++)
                    {
                        if(count<4*msgLength)
                        {
                            pixel = originalImg.getRGB(i,j);
                            pixOut = (pixel & 0xFFFFFFFC) | twoBitMessage[count++];
                            steganoImg.setRGB(i,j,pixOut);
                        }
                        else
                        break loop;
                    }
                }
                Image newImg = steganoImg.getScaledInstance(Stegano_imgLabel1.getWidth(), Stegano_imgLabel1.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon img1 = new ImageIcon(newImg);
                Stegano_imgLabel1.setIcon(img1);
            }
        }
        if(ende == 2)
        {
            if(!isEncoded(steganoImg, steganoImg.getWidth(), steganoImg.getHeight())) {
			jTextArea2.setText(null);
		}
            else
            {
		
		int msgLength = getEncodedLength(steganoImg, steganoImg.getWidth(), steganoImg.getHeight());
				
		StringBuffer decodedMsg = new StringBuffer();
		Deque<Integer> listChar = new ArrayDeque<Integer>();
		
		int pixel, temp, charOut, ignore = 0, count = 0;
		loop: for(int i = 0; i < steganoImg.getWidth(); i++) {
			for(int j = 0; j < steganoImg.getHeight(); j++) {
				if(ignore < 36 + 4*(String.valueOf(msgLength).length()+1)) {
					ignore++;
					continue;
				}
				
				if(count++ == 4*msgLength) {
					break loop;
				}
				pixel = steganoImg.getRGB(i, j); //grab RGB value at specified pixel
				temp = pixel & 0x03; //extract 2 LSB from encoded data
				
				listChar.add(temp); //add the extracted data to a queue for later processing
				
				if(listChar.size() >=4) { //once we have 8 bits of data extracted
					//combine them to create a byte, and store this byte as a character
					charOut = (listChar.pop() << 6) | (listChar.pop() << 4) | (listChar.pop() << 2) | listChar.pop() ;
					decodedMsg.append((char)charOut);
				}
			}
                }
                String outputMsg = new String(decodedMsg);
                jTextArea2.setText(outputMsg);
            }
        }
    }//GEN-LAST:event_EncDecButton1ActionPerformed

    private void EncoderButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncoderButton1ActionPerformed
        // TODO add your handling code here:
        ende = 1;
        Stegano_imgLabel1.setVisible(true);
        jLabel15.setText("Input text:");
        EncoderButton1.setBackground(new Color(60,160,180));
        DecoderButton1.setBackground(new Color(100,100,100));
        EncDecButton1.setText("Encode");
        SaveButton1.setText("Save Image File");
        ChooseTxtButton1.setVisible(true);
        ResetButton1.doClick();
    }//GEN-LAST:event_EncoderButton1ActionPerformed

    private void DecoderButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecoderButton1ActionPerformed
        // TODO add your handling code here:
        ende = 2;
        jLabel15.setText("Output text:");
        Stegano_imgLabel1.setVisible(false);
        DecoderButton1.setBackground(new Color(60,160,180));
        EncoderButton1.setBackground(new Color(100,100,100));
        EncDecButton1.setText("Decode");
        SaveButton1.setText("Save Text File");
        ChooseTxtButton1.setVisible(false);
        ResetButton1.doClick();
    }//GEN-LAST:event_DecoderButton1ActionPerformed

    private void SaveButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButton1ActionPerformed
        // TODO add your handling code here:
        if(ende == 1)
        {
            int returnValue = save_img.showSaveDialog(this);
            if(returnValue == JFileChooser.APPROVE_OPTION)
            {
                try            {
                    ImageIO.write(steganoImg,"png",save_img.getSelectedFile());
                    JOptionPane.showMessageDialog(null,"File successfully saved");
                }
                catch(IOException e)
                {
                    JOptionPane.showMessageDialog(null,"Error in saving file");
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null,"No file choosen!");
            }
        }
        if(ende == 2)
        {
            int returnValue = save_txt.showSaveDialog(this);
            if(returnValue ==JFileChooser.APPROVE_OPTION)
            {
                String content = jTextArea2.getText();
                File f = save_txt.getSelectedFile();
                try
                {
                    FileWriter fw = new FileWriter(f.getPath());
                    fw.write(content);
                    fw.flush();
                    fw.close();
                    JOptionPane.showMessageDialog(null,"File successfully saved");
                }
                catch(IOException e)
                {
                    JOptionPane.showMessageDialog(null, "Error in saving file");
                }
            }
            else
                JOptionPane.showMessageDialog(null,"No file choosen");
        }
    }//GEN-LAST:event_SaveButton1ActionPerformed

    private void EndecButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EndecButtonActionPerformed
        // TODO add your handling code here:
        if(ende == 1)
        {
            if(originalImg!=null)
            {
                int imgCols = originalImg.getWidth();
                int imgRows = originalImg.getHeight();
                int msgLength = jTextArea2.getText().length();
                String message = "!encoded!" + msgLength + "!" + jTextArea2.getText();
                msgLength = message.length();
                int[] oneBitMessage = new int[8 * msgLength];
                char currentChar;
                for(int i=0; i<msgLength; i++)
                {
                    currentChar = message.charAt(i);
                    oneBitMessage[8*i + 0] = (currentChar >> 7) & 0x1;
                    oneBitMessage[8*i + 1] = (currentChar >> 6) & 0x1;
                    oneBitMessage[8*i + 2] = (currentChar >> 5) & 0x1;
                    oneBitMessage[8*i + 3] = (currentChar >> 4) & 0x1;
                    oneBitMessage[8*i + 4] = (currentChar >> 3) & 0x1;
                    oneBitMessage[8*i + 5] = (currentChar >> 2) & 0x1;
                    oneBitMessage[8*i + 6] = (currentChar >> 1) & 0x1;
                    oneBitMessage[8*i + 7] = (currentChar) & 0x1;
                }
                int pixel, pixOut=0, count = 0,tempCount =0, d = 0, d1 = 0, m = 0;
                loop: for(int i=0; i<imgCols; i++)
                {
                    for(int j=0; j<imgRows; j++)
                    {
                        if(j < imgRows-1)
                        {
                            Color c1 = new Color(originalImg.getRGB(i,j));
                            Color c2 = new Color(originalImg.getRGB(i,j+1));
                            d = findDifference(c1, c2);
                            m = (int)(Math.log((double)d)/Math.log(2.0));
                            for(int x=0; x<m; x++)
                            {
                                pixel = originalImg.getRGB(i,j);
                                pixOut = (pixel & value[x]) | oneBitMessage[tempCount];
                                tempCount++;
                            }
                            d1 = findDifference(new Color(pixOut), c2);
                            if(d==0||d==1)
                                d=2;
                            if(d1==0||d1==1)
                                d1=2;
                            int check = checkRange(d)-checkRange(d1);
                            if(check==0)
                            {
                                //m = (int)(Math.log((double)d)/Math.log(2.0));
                                if(count<8*msgLength)
                                {
                                    for(int x=0; x<m; x++)
                                    {
                                        pixel = originalImg.getRGB(i,j);
                                        pixOut = (pixel & 0xFFFFFFFE) | oneBitMessage[count];
                                        count++;
                                        steganoImg.setRGB(i,j,pixOut);
                                    }
                                }
                                else
                                break loop;
                            }
                        }
                    }
                }
                Image newImg = steganoImg.getScaledInstance(Stegano_imgLabel1.getWidth(), Stegano_imgLabel1.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon img1 = new ImageIcon(newImg);
                Stegano_imgLabel1.setIcon(img1);
            }
        }
        if(ende == 2)
        {
            if(!isEncoded(steganoImg, steganoImg.getWidth(), steganoImg.getHeight())) {
			jTextArea2.setText(null);
		}
            else
            {
		
		int msgLength = getEncodedLength(steganoImg, steganoImg.getWidth(), steganoImg.getHeight());
				
		StringBuffer decodedMsg = new StringBuffer();
		Deque<Integer> listChar = new ArrayDeque<Integer>();
		
		int pixel, temp, charOut, ignore = 0, count = 0;
		loop: for(int i = 0; i < steganoImg.getWidth(); i++) {
			for(int j = 0; j < steganoImg.getHeight(); j++) {
				if(ignore < 36 + 4*(String.valueOf(msgLength).length()+1)) {
					ignore++;
					continue;
				}
				
				if(count++ == 4*msgLength) {
					break loop;
				}
				pixel = steganoImg.getRGB(i, j); //grab RGB value at specified pixel
				temp = pixel & 0x03; //extract 2 LSB from encoded data
				
				listChar.add(temp); //add the extracted data to a queue for later processing
				
				if(listChar.size() >=4) { //once we have 8 bits of data extracted
					//combine them to create a byte, and store this byte as a character
					charOut = (listChar.pop() << 6) | (listChar.pop() << 4) | (listChar.pop() << 2) | listChar.pop() ;
					decodedMsg.append((char)charOut);
				}
			}
                }
                String outputMsg = new String(decodedMsg);
                jTextArea2.setText(outputMsg);
            }
        }
    }//GEN-LAST:event_EndecButtonActionPerformed

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        // TODO add your handling code here:
        BasePanel.removeAll();
        BasePanel.add(RegisterPanel);
        BasePanel.repaint();
        BasePanel.revalidate();
        Login_Label.setVisible(true);
    }//GEN-LAST:event_jLabel13MouseClicked

    private void jPasswordField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPasswordField1FocusGained
        // TODO add your handling code here:
        jPasswordField1.selectAll();
    }//GEN-LAST:event_jPasswordField1FocusGained

    private void jTextField1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField1FocusGained
        // TODO add your handling code here:
        jTextField1.selectAll();
    }//GEN-LAST:event_jTextField1FocusGained

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String username = jTextField1.getText();
        String password = jPasswordField1.getText();
        
        int i = loginCheck(username, password);
        if(i !=0)
        {
            SidePane.setVisible(true);
            JOptionPane.showMessageDialog(this, "Welcome to Steganography Application");
            //BasePanel.setVisible(false);
            Logout_Label.setVisible(true);
            Login_Label.setVisible(false);
            LoginInvisible();
            LSB_Panel.setVisible(true);
            PVD_Panel.setVisible(true);
            INFO_Panel.setVisible(true);
            Title.setVisible(true);
            jTextField1.setText("");
            jPasswordField1.setText("");
            
        }
        if(i==0)
        {
            JOptionPane.showMessageDialog(this, "Invalid Username or password");
        }
        
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String F_name = jTextField2.getText();
        String L_name = jTextField3.getText();
        String username = jTextField4.getText();
        String password = "";
        if(jPasswordField2.getText().equals(jPasswordField3.getText())){
           password = jPasswordField2.getText();
        }
        else{
            JOptionPane.showMessageDialog(this, "Entered passwords are not matched, enter it again!!!");
        }
        if(F_name.equals("") || L_name.equals("") || username.equals("") || password.equals("")){
            
            JOptionPane.showMessageDialog(this, "Please enter valid input..");
        }
        else{
        
            int i =  setAllDetails(F_name,L_name,username,password);
            if(i==1)
            {
                JOptionPane.showMessageDialog(this, "Sign up successful, now proceed to Login..");
                jTextField2.setText("");
                jTextField3.setText("");
                jTextField4.setText("");
                jPasswordField2.setText("");
                jPasswordField3.setText("");
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Sign up unsuccessful");
            }
        }
    
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void Logout_LabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Logout_LabelMouseClicked
        // TODO add your handling code here:

        BasePanel.removeAll();
        BasePanel.add(LoginPanel);
        BasePanel.add(RegisterPanel);
        BasePanel.repaint();
        BasePanel.revalidate();
        LoginVisible();
        Logout_Label.setVisible(false);
        LSB_Panel.setVisible(false);
        PVD_Panel.setVisible(false);
        INFO_Panel.setVisible(false);
        
    }//GEN-LAST:event_Logout_LabelMouseClicked

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed
   public static Connection takeConnection()
    {
        Connection con=null;
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            String path="jdbc:mysql://localhost:3306/steg";
            con = DriverManager.getConnection(path,"root","1234");
            System.out.println("Connection successfull");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return con;
    }
   public static int setAllDetails(String F_name,String L_name,String username,String password)
    {  int i=0;
        try
        {
            Connection con = takeConnection();
            String query= "insert into reg(F_name,L_name,username,password) values(?,?,?,?)";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, F_name);
            ps.setString(2, L_name);
            ps.setString(3, username);
            ps.setString(4, password);
            
            i = ps.executeUpdate();
            con.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return i;
    }
   public static int loginCheck(String username,String password)
    {
        int i=0;
        try
        {
            Connection con = takeConnection();
            String query="select Userid from reg where Username=? and Password=?";
            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, username);
            ps.setString(2, password);
            ResultSet rs = ps.executeQuery();
            if(rs.next())
            {
               i = rs.getInt(1);
               i++;
            }
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return i;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }
    public void LoginInvisible(){
        Title.setVisible(false);
        jLabel10.setVisible(false);
        jLabel11.setVisible(false);
        jLabel12.setVisible(false);
        jTextField1.setVisible(false);
        jPasswordField1.setVisible(false);
        jLabel13.setVisible(false);
        jButton1.setVisible(false);
        jSeparator1.setVisible(false);
        jSeparator2.setVisible(false);
    }

    public void LoginVisible(){
        Title.setVisible(true);
        jLabel10.setVisible(true);
        jLabel11.setVisible(true);
        jLabel12.setVisible(true);
        jTextField1.setVisible(true);
        jPasswordField1.setVisible(true);
        jLabel13.setVisible(true);
        jButton1.setVisible(true);
        jSeparator1.setVisible(true);
        jSeparator2.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Background;
    private javax.swing.JPanel BasePanel;
    private javax.swing.JButton ChooseImgButton;
    private javax.swing.JButton ChooseImgButton1;
    private javax.swing.JButton ChooseTxtButton;
    private javax.swing.JButton ChooseTxtButton1;
    private javax.swing.JPanel Close;
    private javax.swing.JButton DecoderButton;
    private javax.swing.JButton DecoderButton1;
    private javax.swing.JLabel Dragger;
    private javax.swing.JButton EncDecButton;
    private javax.swing.JButton EncDecButton1;
    private javax.swing.JButton EncoderButton;
    private javax.swing.JButton EncoderButton1;
    private javax.swing.JButton EndecButton;
    private javax.swing.JPanel INFO;
    private javax.swing.JPanel INFO_Panel;
    private javax.swing.JPanel LSB;
    private javax.swing.JLabel LSBBackLabel;
    private javax.swing.JPanel LSB_Panel;
    private javax.swing.JLabel LoginBackLabel;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JLabel Login_Label;
    private javax.swing.JLabel Logout_Label;
    private javax.swing.JPanel Minimize;
    private javax.swing.JLabel Orig_imgLabel;
    private javax.swing.JLabel Orig_imgLabel1;
    private javax.swing.JPanel PVD;
    private javax.swing.JPanel PVD_Panel;
    private javax.swing.JLabel RegisteBackLabel;
    private javax.swing.JPanel RegisterPanel;
    private javax.swing.JButton ResetButton;
    private javax.swing.JButton ResetButton1;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton SaveButton1;
    private javax.swing.JPanel SidePane;
    private javax.swing.JLabel Stegano_imgLabel;
    private javax.swing.JLabel Stegano_imgLabel1;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel infoBacklabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JPasswordField jPasswordField3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JLabel sideBackgroundLabel;
    // End of variables declaration//GEN-END:variables
}
